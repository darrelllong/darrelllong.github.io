[
  {
    "id": 1,
    "title": "Accessing Replicated Data in a Large-Scale Distributed System",
    "short_description": "Replicating a data object improves the availability of the data, and can improve access latency by locating copies of the object near to their use. When accessing replicated objects across an internetwork, the time to access different replicas is non-uniform. ",
    "full_content": "Replicating a data object improves the availability of the data, and can improve access latency by locating copies of the object near to their use. When accessing replicated objects across an internetwork, the time to access different replicas is non-uniform. Further, the probability that a particular replica is inaccessible is much higher in an internetwork than in a local-area network (LAN) because of partitions and the many intermediate hosts and networks that can fail. We report three replica-accessing algorithms which can be tuned to minimize either access latency or the number of messages sent. These algorithms assume only an unreliable datagram mechanism for communicating with replicas. Our work extends previous investigations into the performance of replication algorithms by assuming unreliable communication.\nWe have investigated the performance of these algorithms by measuring the communication behavior of the Internet, and by building discrete-event simulations based on our measurements. We find that almost all message failures are either transient or due to long-term host failure, so that retrying messages a few times adds only a small amount to the overall message traffic while improving both access latency as long as the probability of message failure is small. Moreover, the algorithms which retry messages on failure provide significantly improved availability over those which do not.",
    "author": ["Richard Golding", "Darrell D. E. Long"],
    "date": "July 2003",
    "url": "https://www.crss.us/media/pubs/c92408e66e20a15d78c3888c31c4b90e761320f1.pdf",
    "bibTeX": {
      "@article": "golding-ijcs91",
      "author": "Richard Golding and Darrell D. E. Long",
      "title": "Accessing Replicated Data in a Large-Scale Distributed System",
      "journal": "International Journal in Computer Simulation",
      "pages": "347-372",
      "volume": "1",
      "number": "4",
      "month": "jul",
      "year": "1991"
    }
  },
  {
    "id": 2,
    "title": "Scalable Session Locking for a Distributed File System",
    "short_description": "File systems provide an interface for applications to obtain exclusive access to files, in which a process holds privileges to a file that cannot be preempted and restrict the capabilities of other processes. Local file systems do this by maintaining information about the privileges of current file sessions, and checking subsequent sessions for compatibility. ",
    "full_content": "File systems provide an interface for applications to obtain exclusive access to files, in which a process holds privileges to a file that cannot be preempted and restrict the capabilities of other processes. Local file systems do this by maintaining information about the privileges of current file sessions, and checking subsequent sessions for compatibility. Implementing exclusive access in this manner for distributed file systems degrades performance by requiring every new file session to be registered with a lock server that maintains global session state. We present two techniques for improving the performance of session management in the distributed environment. We introduce a distributed lock for managing file access, called a semi-preemptible lock, that allows clients to cache privileges. Under a semi-preemptible lock, a file system creates new sessions without messages to the lock manager. This improves performance by exploiting locality â€“ the affinity of files to clients. We also present data structures and algorithms for the dynamic evaluation of locks that allow a distributed file system to efficiently manage arbitrarily complex locking. In this case, complex means that an object can be locked in a large number of unique modes. The combination of these techniques results in a distributed locking scheme that supports fine-grained concurrency control with low memory and message overhead and with the assurance that their locking system is correct and avoids unnecessary deadlocks.",
    "author": [
      "Randal C. Burns",
      "Robert M. Rees",
      "Larry J. Stockmeyer",
      "Darrell D. E. Long"
    ],
    "date": "January 2001",
    "url": "https://www.crss.us/media/pubs/c92408e66e20a15d78c3888c31c4b90e761320f1.pdf",
    "bibTeX": {
      "@article": "burns-ccj01",
      "author": "Randal Burns and Robert M. Rees and Larry Stockmeyer and Darrell D. E. Long",
      "title": "Scalable Session Locking for a Distributed File System",
      "journal": "Cluster Computing Journal",
      "pages": "295-306",
      "volume": "4",
      "month": "oct",
      "year": "2001"
    }
  }
]
